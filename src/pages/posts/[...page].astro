---

import Layout from "@layouts/Layout.astro"
import { site } from "src/config";
import { getCollection } from "astro:content";

export async function getStaticPaths({ paginate } : { paginate: Function}){
	const posts = await getCollection('posts');
	return paginate(posts, { pageSize: 12 })
}

const { page } = Astro.props
console.log(Object.keys(page))
---
<Layout title={'文章归档 | ' + site.name} description="所有文章">
	<h1>文章归档 - {page.currentPage}</h1>
	<section class="posts">
		<div class="post-list">
			<div class="post-container">
				{page.data.map((post: any) => (
					<div class="article">
						<div class="cover">
							<img src={post.data.cover} alt={post.data.title} class="cover-img"/>
							<span class="category">{post.data.category}</span>
						</div>
						
						<div class="meta">
							<a href={`/post/${post.slug}`} class="title">{ post.data.title }</a>
							<div class="desc">{ post.data.description }</div>
						</div>
					</div>
				))}
			</div>
			<div class="pagination">
				{page.url.prev ? <a href={page.url.prev} class="paginate prev">上一页</a> : null}
				{page.url.next ? <a href={page.url.next} class="paginate next">下一页</a> : null}
			</div>
		</div>
	</section>
</Layout>

<style>
.posts{
	margin: 1rem 0 0;
}
	
.post-container{
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    gap: 1em;
}
.post-card{
    width: calc(calc(100% - 3em) / 4);
}
@media (max-width: 1500px){
    .post-card{
        width: calc(calc(100% - 2em) / 3);
    }
}
@media (max-width: 1200px){
    .post-card{
        width: calc(calc(100% - 1em) / 2);
    }
}
@media (max-width: 768px){
    .post-card{
        width: 100%;
    }
}

.article{
    width: calc(calc(100% - 3em) / 4);
}
@media (max-width: 1500px){
    .article{
        width: calc(calc(100% - 2em) / 3);
    }
}
@media (max-width: 1200px){
    .article{
        width: calc(calc(100% - 1em) / 2);
    }
}
@media (max-width: 768px){
    .article{
        width: 100%;
    }
}
.article .cover{
    width: 100%;
    aspect-ratio: 2/1;
    border: 4px solid rgba(255, 255, 255, 0.5);
    border-radius: var(--base-radius);
    position: relative;
    overflow: hidden;
    transition: 0.3s;
}
.article:hover .cover{
    border: 4px solid rgba(255, 255, 255, 0.9);
    box-shadow: 1px 1px 3px rgba(255, 255, 255, 0.9);
}
.article .cover-img{
    width: 100%;
    height: 100%;
    object-fit: cover;
}
.article .category{
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    border-radius: calc(0.75 * var(--base-radius));
    background-color: var(--deep-bg);
    color: #232323;
    font-weight: bold;
    padding: 4px calc(0.75 * var(--base-radius));
    font-size: 0.7rem;
}
.article .meta{
    color: white;
}
.article .title{
    display: inline-block;
    max-width: 100%;
    font-weight: bold;
    line-height: 1.5;
    margin-top: 0.5rem;
    font-size: 1.25rem;
    color: white;
    text-decoration: none;
    transition: 0.3s;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.article .title:hover{
    box-shadow: 0 2px white;
}
.article .desc{
    line-height: 1.5;
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
}

.pagination{
	display: flex;
	justify-content: space-between;
	margin: 1em 0 0 0;
	gap: 1em;
}
.pagination .paginate{
	flex: 1;
	padding: 1em;
	display: inline-block;
	background: var(--light-bg);
	border-radius: var(--base-radius);
	transition: 0.3s;
}
.pagination .next{
	text-align: right;
}
.pagination .paginate:is(:hover, :focus-within){
	background: var(--deep-bg);
	color: var(--main-color);
}
</style>
